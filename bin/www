#!/usr/bin/env node

/**
 * Module dependencies.
 */
 const app = require("../app.js");
 const debug  = require("debug")("app:debug")
 const http = require('http');
 const cluster = require("cluster");
 const {Worker} = require("worker_threads")
 let workers = []
 let numCores = require('os').cpus().length;
 const totalCPUs = require("os").cpus().length;
 
 
 const SetUpWorkerProcess = () => {
 
     debug('Master cluster setting up '+ numCores + ' workers');
 
     for(let i = 0; i< numCores; i++){
         workers.push(cluster.fork());
 
         workers[i].on('message', function(message){
             console.log(message)
         })
     }
 
     cluster.on('online', function(worker){
         debug('Worker '+ worker.process.pid + ' is Listening ');
         });
 
         cluster.on('exit', function(worker, code, signal){
             debug('Worker '+ worker.process.pid + 'died with code: '+ code + ', and signal :'+ signal);
 
             workers[workers.length -1].on('message', (message) => {
                 console.log(message);
             })
         })
 } 
 
 const setupExpress = () => {
 
     const server = http.createServer(app);
 
     const port = normalizePort(process.env.PORT || '4000');
     app.set('port', port);
     debug("Starting up Products", port, process.env.APP_NAME);
 
     debug("Init cron", process.env.NODE_ENV);
 
     server.listen(port);
     server.setTimeout(500000);
     server.on('error', (error) => {
         onError(error, port)
     });
 
     server.on('listening', () => {
         const addr = server.address();
         const bind = typeof addr === 'string'
         ? 'pipe '+ addr
         : 'port '+ addr.port;
         debug('Listening on '+ bind);
     });
 
    debug(`Worker ${process.pid} started`);
 
 
 
 }
 
 /**
  * setupServer
  * @param isClusterRequired
  */
 
 const setupServer = (isClusterRequired) =>{
     if(isClusterRequired && cluster.isMaster){
         SetUpWorkerProcess();
     }else{
     setupExpress();
 }
 }
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
  function normalizePort(val) {
     const port = parseInt(val, 10);
 
     if (isNaN(port)) {
         // named pipe
         return val;
     }
 
     if (port >= 0) {
         // port number
         return port;
     }
 
     return false;
 }
 
 function onError(error, port) {
     if (error.syscall !== 'listen') {
         throw error;
     }
 
     const bind = typeof port === 'string'
         ? 'Pipe ' + port
         : 'Port ' + port;
 
     // handle specific listen errors with friendly messages
     switch (error.code) {
         case 'EACCES':
             console.error(bind + ' requires elevated privileges');
             process.exit(1);
             break;
         case 'EADDRINUSE':
             console.error(bind + ' is already in use');
             process.exit(1);
             break;
         default:
             throw error;
     }
 }
 if (process.env.NODE_ENV != "development" && process.env.NODE_ENV != "staging") {
     if (numCores > 1) {
         setupServer(true);
     } else {
         setupServer(false);
     }
 } else {
     setupServer(false);
 }
 